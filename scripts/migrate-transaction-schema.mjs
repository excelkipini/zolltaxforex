#!/usr/bin/env node

/**
 * Script de migration pour mettre √† jour le sch√©ma des transactions
 * pour supporter le workflow de transfert d'argent avec ex√©cuteur
 */

import 'dotenv/config'
import { neon } from '@neondatabase/serverless'
import { readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Charger explicitement le fichier .env.local
try {
  const envPath = join(__dirname, '..', '.env.local')
  const envContent = readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
} catch (error) {
  console.log('‚ö†Ô∏è  Fichier .env.local non trouv√© ou erreur de lecture')
}

// Configuration de la base de donn√©es
const sql = neon(process.env.DATABASE_URL)

async function migrateTransactionSchema() {
  console.log('üîÑ Migration du sch√©ma des transactions pour le workflow de transfert\n')

  try {
    // 1. Ajouter les nouveaux champs pour le workflow de transfert
    console.log('1Ô∏è‚É£ Ajout des nouveaux champs pour le workflow de transfert...')
    
    // Montant r√©el renseign√© par l'auditeur (en EUR)
    await sql`
      ALTER TABLE transactions ADD COLUMN IF NOT EXISTS real_amount_eur NUMERIC
    `
    console.log('‚úÖ Champ real_amount_eur ajout√©')

    // Commission calcul√©e automatiquement
    await sql`
      ALTER TABLE transactions ADD COLUMN IF NOT EXISTS commission_amount NUMERIC
    `
    console.log('‚úÖ Champ commission_amount ajout√©')

    // Ex√©cuteur assign√© √† la transaction
    await sql`
      ALTER TABLE transactions ADD COLUMN IF NOT EXISTS executor_id UUID REFERENCES users(id)
    `
    console.log('‚úÖ Champ executor_id ajout√©')

    // Date d'ex√©cution
    await sql`
      ALTER TABLE transactions ADD COLUMN IF NOT EXISTS executed_at TIMESTAMPTZ
    `
    console.log('‚úÖ Champ executed_at ajout√©')

    // Re√ßu de la transaction (URL ou chemin du fichier)
    await sql`
      ALTER TABLE transactions ADD COLUMN IF NOT EXISTS receipt_url TEXT
    `
    console.log('‚úÖ Champ receipt_url ajout√©')

    // Commentaire de l'ex√©cuteur
    await sql`
      ALTER TABLE transactions ADD COLUMN IF NOT EXISTS executor_comment TEXT
    `
    console.log('‚úÖ Champ executor_comment ajout√©')
    console.log('')

    // 2. Mettre √† jour la contrainte de statut pour inclure les nouveaux √©tats
    console.log('2Ô∏è‚É£ Mise √† jour de la contrainte de statut...')
    
    // Supprimer l'ancienne contrainte
    await sql`
      ALTER TABLE transactions DROP CONSTRAINT IF EXISTS transactions_status_check
    `
    console.log('‚úÖ Ancienne contrainte de statut supprim√©e')

    // Cr√©er la nouvelle contrainte avec les nouveaux statuts
    await sql`
      ALTER TABLE transactions ADD CONSTRAINT transactions_status_check 
      CHECK (status IN ('pending','validated','rejected','completed','executed'))
    `
    console.log('‚úÖ Nouvelle contrainte de statut cr√©√©e avec les statuts: pending, validated, rejected, completed, executed')
    console.log('')

    // 3. Ajouter des index pour am√©liorer les performances
    console.log('3Ô∏è‚É£ Ajout d\'index pour am√©liorer les performances...')
    
    await sql`
      CREATE INDEX IF NOT EXISTS idx_transactions_executor_id ON transactions(executor_id)
    `
    console.log('‚úÖ Index sur executor_id cr√©√©')

    await sql`
      CREATE INDEX IF NOT EXISTS idx_transactions_status ON transactions(status)
    `
    console.log('‚úÖ Index sur status cr√©√©')

    await sql`
      CREATE INDEX IF NOT EXISTS idx_transactions_type_status ON transactions(type, status)
    `
    console.log('‚úÖ Index composite sur type et status cr√©√©')
    console.log('')

    // 4. V√©rifier la structure de la table
    console.log('4Ô∏è‚É£ V√©rification de la structure de la table...')
    const tableStructure = await sql`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'transactions' 
      ORDER BY ordinal_position
    `
    
    console.log('   Structure de la table transactions:')
    tableStructure.forEach(col => {
      console.log(`     - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'}`)
    })
    console.log('')

    // 5. V√©rifier les contraintes
    console.log('5Ô∏è‚É£ V√©rification des contraintes...')
    const constraints = await sql`
      SELECT conname, pg_get_constraintdef(oid) as definition
      FROM pg_constraint 
      WHERE conrelid = 'transactions'::regclass
      AND conname LIKE '%_check'
    `
    
    console.log('   Contraintes de v√©rification:')
    constraints.forEach(constraint => {
      console.log(`     - ${constraint.conname}: ${constraint.definition}`)
    })
    console.log('')

    // 6. Tester l'insertion d'une transaction de test
    console.log('6Ô∏è‚É£ Test d\'insertion d\'une transaction de test...')
    try {
      const testTransaction = await sql`
        INSERT INTO transactions (
          type, status, description, amount, currency, created_by, agency, 
          real_amount_eur, commission_amount, executor_id
        )
        VALUES (
          'transfer', 'validated', 'Test transfer workflow', 100000, 'XAF', 'Test User', 'Agence Centre',
          150.00, 5000.00, (SELECT id FROM users WHERE role = 'executor' LIMIT 1)
        )
        RETURNING id::text, type, status, commission_amount
      `
      console.log('‚úÖ Test d\'insertion r√©ussi')
      console.log(`   Transaction cr√©√©e: ${testTransaction[0].id} (${testTransaction[0].type} - ${testTransaction[0].status})`)
      console.log(`   Commission: ${testTransaction[0].commission_amount} XAF`)
      
      // Supprimer la transaction de test
      await sql`DELETE FROM transactions WHERE id = ${testTransaction[0].id}`
      console.log('‚úÖ Transaction de test supprim√©e')
    } catch (error) {
      console.log('‚ùå Test d\'insertion √©chou√©:', error.message)
    }
    console.log('')

    console.log('üéâ Migration du sch√©ma des transactions termin√©e avec succ√®s !')
    console.log('\nüìù Nouveaux champs ajout√©s:')
    console.log('   ‚úÖ real_amount_eur: Montant r√©el renseign√© par l\'auditeur (en EUR)')
    console.log('   ‚úÖ commission_amount: Commission calcul√©e automatiquement')
    console.log('   ‚úÖ executor_id: Ex√©cuteur assign√© √† la transaction')
    console.log('   ‚úÖ executed_at: Date d\'ex√©cution')
    console.log('   ‚úÖ receipt_url: Re√ßu de la transaction')
    console.log('   ‚úÖ executor_comment: Commentaire de l\'ex√©cuteur')
    console.log('')
    console.log('üìù Nouveaux statuts disponibles:')
    console.log('   ‚úÖ pending: En attente de validation')
    console.log('   ‚úÖ validated: Valid√©e par l\'auditeur')
    console.log('   ‚úÖ rejected: Rejet√©e')
    console.log('   ‚úÖ completed: Termin√©e par le caissier')
    console.log('   ‚úÖ executed: Ex√©cut√©e par l\'ex√©cuteur')
    console.log('')
    console.log('üöÄ Le sch√©ma est pr√™t pour le workflow de transfert d\'argent !')

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    throw error
  }
}

// Ex√©cuter la migration
migrateTransactionSchema()
  .then(() => {
    console.log('\nüéØ Prochaines √©tapes:')
    console.log('   1. Impl√©menter la logique de calcul de commission')
    console.log('   2. Cr√©er les fonctions de validation automatique')
    console.log('   3. Ajouter l\'interface pour l\'ex√©cuteur')
    console.log('   4. Impl√©menter le syst√®me de t√©l√©chargement de re√ßu')
    console.log('   5. Tester le workflow complet')
  })
  .catch(error => {
    console.error('‚ùå √âchec de la migration:', error)
    process.exit(1)
  })
