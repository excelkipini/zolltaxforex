#!/usr/bin/env node

/**
 * Script pour corriger la contrainte de cl√© √©trang√®re transactions_executor_id_fkey
 * et permettre la suppression/modification des utilisateurs ex√©cuteurs
 */

import 'dotenv/config'
import { neon } from '@neondatabase/serverless'
import { readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Charger explicitement le fichier .env.local
try {
  const envPath = join(__dirname, '..', '.env.local')
  const envContent = readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
} catch (error) {
  console.log('‚ö†Ô∏è  Fichier .env.local non trouv√© ou erreur de lecture')
}

// Configuration de la base de donn√©es
const sql = neon(process.env.DATABASE_URL)

async function fixExecutorForeignKeyConstraint() {
  console.log('üîß Correction de la contrainte de cl√© √©trang√®re transactions_executor_id_fkey\n')

  try {
    // 1. V√©rifier la contrainte actuelle
    console.log('1Ô∏è‚É£ V√©rification de la contrainte actuelle...')
    
    const constraintCheck = await sql`
      SELECT 
        conname, 
        pg_get_constraintdef(oid) as definition,
        confdeltype,
        confupdtype
      FROM pg_constraint 
      WHERE conname = 'transactions_executor_id_fkey' 
      AND conrelid = 'transactions'::regclass
    `
    
    if (constraintCheck.length > 0) {
      const constraint = constraintCheck[0]
      console.log(`   ‚úÖ Contrainte trouv√©e: ${constraint.conname}`)
      console.log(`   üìã D√©finition: ${constraint.definition}`)
      console.log(`   üìã Action DELETE: ${constraint.confdeltype === 'a' ? 'RESTRICT' : constraint.confdeltype === 'c' ? 'CASCADE' : constraint.confdeltype === 'n' ? 'SET NULL' : 'NO ACTION'}`)
      console.log(`   üìã Action UPDATE: ${constraint.confupdtype === 'a' ? 'RESTRICT' : constraint.confupdtype === 'c' ? 'CASCADE' : constraint.confupdtype === 'n' ? 'SET NULL' : 'NO ACTION'}`)
    } else {
      console.log('   ‚ö†Ô∏è  Contrainte transactions_executor_id_fkey non trouv√©e')
    }
    console.log('')

    // 2. V√©rifier les transactions qui r√©f√©rencent des ex√©cuteurs
    console.log('2Ô∏è‚É£ V√©rification des transactions avec ex√©cuteurs assign√©s...')
    
    const transactionsWithExecutors = await sql`
      SELECT 
        t.id::text,
        t.description,
        t.status,
        t.executor_id,
        u.name as executor_name,
        u.email as executor_email
      FROM transactions t
      LEFT JOIN users u ON t.executor_id = u.id
      WHERE t.executor_id IS NOT NULL
      ORDER BY t.created_at DESC
    `
    
    if (transactionsWithExecutors.length > 0) {
      console.log(`   üìä ${transactionsWithExecutors.length} transaction(s) avec ex√©cuteur assign√©:`)
      transactionsWithExecutors.forEach(tx => {
        console.log(`      - ${tx.id}: ${tx.description} (${tx.status}) ‚Üí ${tx.executor_name || 'Ex√©cuteur supprim√©'} (${tx.executor_email || 'N/A'})`)
      })
    } else {
      console.log('   ‚úÖ Aucune transaction avec ex√©cuteur assign√©')
    }
    console.log('')

    // 3. Supprimer l'ancienne contrainte
    console.log('3Ô∏è‚É£ Suppression de l\'ancienne contrainte...')
    
    await sql`
      ALTER TABLE transactions DROP CONSTRAINT IF EXISTS transactions_executor_id_fkey
    `
    console.log('   ‚úÖ Ancienne contrainte supprim√©e')
    console.log('')

    // 4. Cr√©er la nouvelle contrainte avec ON DELETE SET NULL
    console.log('4Ô∏è‚É£ Cr√©ation de la nouvelle contrainte avec ON DELETE SET NULL...')
    
    await sql`
      ALTER TABLE transactions 
      ADD CONSTRAINT transactions_executor_id_fkey 
      FOREIGN KEY (executor_id) REFERENCES users(id) 
      ON DELETE SET NULL ON UPDATE CASCADE
    `
    console.log('   ‚úÖ Nouvelle contrainte cr√©√©e avec ON DELETE SET NULL')
    console.log('')

    // 5. V√©rifier la nouvelle contrainte
    console.log('5Ô∏è‚É£ V√©rification de la nouvelle contrainte...')
    
    const newConstraintCheck = await sql`
      SELECT 
        conname, 
        pg_get_constraintdef(oid) as definition,
        confdeltype,
        confupdtype
      FROM pg_constraint 
      WHERE conname = 'transactions_executor_id_fkey' 
      AND conrelid = 'transactions'::regclass
    `
    
    if (newConstraintCheck.length > 0) {
      const constraint = newConstraintCheck[0]
      console.log(`   ‚úÖ Nouvelle contrainte v√©rifi√©e: ${constraint.conname}`)
      console.log(`   üìã D√©finition: ${constraint.definition}`)
      console.log(`   üìã Action DELETE: ${constraint.confdeltype === 'a' ? 'RESTRICT' : constraint.confdeltype === 'c' ? 'CASCADE' : constraint.confdeltype === 'n' ? 'SET NULL' : 'NO ACTION'}`)
      console.log(`   üìã Action UPDATE: ${constraint.confupdtype === 'a' ? 'RESTRICT' : constraint.confupdtype === 'c' ? 'CASCADE' : constraint.confupdtype === 'n' ? 'SET NULL' : 'NO ACTION'}`)
    }
    console.log('')

    // 6. Tester la suppression d'un utilisateur ex√©cuteur
    console.log('6Ô∏è‚É£ Test de suppression d\'un utilisateur ex√©cuteur...')
    
    // Cr√©er un utilisateur ex√©cuteur de test
    const testExecutor = await sql`
      INSERT INTO users (name, email, role, agency, password_hash)
      VALUES ('Test Executor Delete', 'test-executor-delete@example.com', 'executor', 'Agence Centre', 'test_hash')
      RETURNING id::text, name, email, role
    `
    
    const executor = testExecutor[0]
    console.log(`   ‚úÖ Utilisateur ex√©cuteur de test cr√©√©: ${executor.name} (${executor.id})`)
    
    // Cr√©er une transaction avec cet ex√©cuteur
    const testTransaction = await sql`
      INSERT INTO transactions (
        id, type, status, description, amount, currency, created_by, agency, 
        executor_id, commission_amount
      )
      VALUES (
        gen_random_uuid(), 'transfer', 'validated', 'Test suppression ex√©cuteur', 
        50000, 'XAF', 'Test User', 'Agence Centre',
        ${executor.id}, 5000
      )
      RETURNING id::text, executor_id
    `
    
    const transaction = testTransaction[0]
    console.log(`   ‚úÖ Transaction de test cr√©√©e: ${transaction.id} avec ex√©cuteur ${transaction.executor_id}`)
    
    // Supprimer l'utilisateur ex√©cuteur
    await sql`DELETE FROM users WHERE id = ${executor.id}`
    console.log(`   ‚úÖ Utilisateur ex√©cuteur supprim√©`)
    
    // V√©rifier que la transaction a maintenant executor_id = NULL
    const updatedTransaction = await sql`
      SELECT id::text, executor_id, status
      FROM transactions 
      WHERE id = ${transaction.id}
    `
    
    const updated = updatedTransaction[0]
    console.log(`   ‚úÖ Transaction mise √† jour: executor_id = ${updated.executor_id || 'NULL'}`)
    
    // Nettoyer la transaction de test
    await sql`DELETE FROM transactions WHERE id = ${transaction.id}`
    console.log(`   ‚úÖ Transaction de test supprim√©e`)
    console.log('')

    // 7. Tester la modification d'un utilisateur ex√©cuteur
    console.log('7Ô∏è‚É£ Test de modification d\'un utilisateur ex√©cuteur...')
    
    // Cr√©er un utilisateur ex√©cuteur de test
    const testExecutor2 = await sql`
      INSERT INTO users (name, email, role, agency, password_hash)
      VALUES ('Test Executor Update', 'test-executor-update@example.com', 'executor', 'Agence Centre', 'test_hash')
      RETURNING id::text, name, email, role
    `
    
    const executor2 = testExecutor2[0]
    console.log(`   ‚úÖ Utilisateur ex√©cuteur de test cr√©√©: ${executor2.name} (${executor2.id})`)
    
    // Cr√©er une transaction avec cet ex√©cuteur
    const testTransaction2 = await sql`
      INSERT INTO transactions (
        id, type, status, description, amount, currency, created_by, agency, 
        executor_id, commission_amount
      )
      VALUES (
        gen_random_uuid(), 'transfer', 'validated', 'Test modification ex√©cuteur', 
        75000, 'XAF', 'Test User', 'Agence Centre',
        ${executor2.id}, 7500
      )
      RETURNING id::text, executor_id
    `
    
    const transaction2 = testTransaction2[0]
    console.log(`   ‚úÖ Transaction de test cr√©√©e: ${transaction2.id} avec ex√©cuteur ${transaction2.executor_id}`)
    
    // Modifier l'utilisateur ex√©cuteur (changer le r√¥le)
    await sql`
      UPDATE users 
      SET role = 'cashier', name = 'Test Executor Updated'
      WHERE id = ${executor2.id}
    `
    console.log(`   ‚úÖ Utilisateur ex√©cuteur modifi√© (r√¥le chang√© vers cashier)`)
    
    // V√©rifier que la transaction a toujours le m√™me executor_id
    const updatedTransaction2 = await sql`
      SELECT id::text, executor_id, status
      FROM transactions 
      WHERE id = ${transaction2.id}
    `
    
    const updated2 = updatedTransaction2[0]
    console.log(`   ‚úÖ Transaction conserv√©e: executor_id = ${updated2.executor_id}`)
    
    // Nettoyer les donn√©es de test
    await sql`DELETE FROM transactions WHERE id = ${transaction2.id}`
    await sql`DELETE FROM users WHERE id = ${executor2.id}`
    console.log(`   ‚úÖ Donn√©es de test nettoy√©es`)
    console.log('')

    console.log('üéâ Correction de la contrainte de cl√© √©trang√®re termin√©e avec succ√®s !')
    console.log('\nüìù R√©sum√© des modifications:')
    console.log('   ‚úÖ Ancienne contrainte supprim√©e')
    console.log('   ‚úÖ Nouvelle contrainte cr√©√©e avec ON DELETE SET NULL')
    console.log('   ‚úÖ Suppression d\'utilisateur ex√©cuteur test√©e')
    console.log('   ‚úÖ Modification d\'utilisateur ex√©cuteur test√©e')
    console.log('')
    console.log('üöÄ Les utilisateurs ex√©cuteurs peuvent maintenant √™tre supprim√©s et modifi√©s !')
    console.log('   üìã Lors de la suppression d\'un ex√©cuteur, ses transactions auront executor_id = NULL')
    console.log('   üìã Les transactions ne seront pas supprim√©es, seulement l\'assignation sera annul√©e')

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction de la contrainte:', error)
    throw error
  }
}

// Ex√©cuter la correction
fixExecutorForeignKeyConstraint()
  .then(() => {
    console.log('\nüéØ Instructions pour tester:')
    console.log('   1. Connectez-vous en tant qu\'administrateur')
    console.log('   2. Allez dans la section "Utilisateurs"')
    console.log('   3. Essayez de supprimer un utilisateur ex√©cuteur')
    console.log('   4. Essayez de modifier le r√¥le d\'un utilisateur ex√©cuteur')
    console.log('   5. V√©rifiez que les transactions assign√©es √† cet ex√©cuteur ont maintenant executor_id = NULL')
  })
  .catch(error => {
    console.error('‚ùå √âchec de la correction:', error)
    process.exit(1)
  })
