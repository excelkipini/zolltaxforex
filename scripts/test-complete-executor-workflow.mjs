#!/usr/bin/env node

import { neon } from '@neondatabase/serverless'
import fs from 'fs'

// Charger les variables d'environnement
const envContent = fs.readFileSync('.env.local', 'utf8')
envContent.split('\n').forEach(line => {
  const [key, value] = line.split('=')
  if (key && value) {
    process.env[key] = value
  }
})

const sql = neon(process.env.DATABASE_URL)

async function testCompleteExecutorWorkflow() {
  console.log('üîÑ Test du workflow complet de l\'ex√©cuteur...\n')

  try {
    // 1. R√©cup√©rer les utilisateurs n√©cessaires
    console.log('1. R√©cup√©ration des utilisateurs...')
    const users = await sql`
      SELECT id, name, role, agency
      FROM users 
      WHERE role IN ('cashier', 'auditor', 'executor')
      ORDER BY role, name
    `
    
    const cashier = users.find(u => u.role === 'cashier')
    const auditor = users.find(u => u.role === 'auditor')
    const executor = users.find(u => u.role === 'executor')
    
    console.log(`üë§ Caissier: ${cashier?.name || 'Non trouv√©'}`)
    console.log(`üë§ Auditeur: ${auditor?.name || 'Non trouv√©'}`)
    console.log(`üë§ Ex√©cuteur: ${executor?.name || 'Non trouv√©'}`)

    if (!cashier || !auditor || !executor) {
      console.log('‚ùå Tous les utilisateurs n√©cessaires ne sont pas pr√©sents')
      return
    }

    // 2. Cr√©er une transaction de test (√©tape 1: Caissier)
    console.log('\n2. Cr√©ation d\'une transaction de test (Caissier)...')
    const testTransaction = await sql`
      INSERT INTO transactions (
        id, type, status, description, amount, currency, created_by, agency, details
      ) VALUES (
        'TRX-TEST-WORKFLOW-' || EXTRACT(EPOCH FROM NOW())::text,
        'transfer', 
        'pending', 
        'Test workflow complet - ' || NOW()::text, 
        3000000, 
        'XAF', 
        ${cashier.name}, 
        ${cashier.agency},
        '{"destination": "Test Country", "recipient": "Test Recipient"}'
      ) RETURNING id, type, status, description, amount, created_by, created_at
    `
    
    console.log(`‚úÖ Transaction cr√©√©e: ${testTransaction[0].id}`)
    console.log(`   - Statut: ${testTransaction[0].status}`)
    console.log(`   - Cr√©√©e par: ${testTransaction[0].created_by}`)

    // 3. Validation par l'auditeur (√©tape 2: Auditeur)
    console.log('\n3. Validation par l\'auditeur...')
    const realAmountEUR = 300 // Montant r√©el en EUR
    const eurToXAFRate = 650 // Taux de change EUR/XAF
    
    const receivedAmountXAF = testTransaction[0].amount
    const realAmountXAF = realAmountEUR * eurToXAFRate
    const commission = Math.max(0, receivedAmountXAF - realAmountXAF)
    
    console.log(`üìä Calcul de la commission:`)
    console.log(`   - Montant re√ßu: ${receivedAmountXAF} XAF`)
    console.log(`   - Montant r√©el: ${realAmountEUR} EUR (${realAmountXAF} XAF)`)
    console.log(`   - Commission: ${commission} XAF`)
    console.log(`   - Seuil: 5000 XAF`)
    
    const shouldValidate = commission >= 5000
    const newStatus = shouldValidate ? 'validated' : 'rejected'
    const executorId = shouldValidate ? executor.id : null
    
    console.log(`üéØ D√©cision: ${shouldValidate ? 'VALIDATION' : 'REJET'} (commission ${shouldValidate ? '‚â•' : '<'} 5000 XAF)`)
    
    // Mettre √† jour la transaction
    const updatedTransaction = await sql`
      UPDATE transactions 
      SET 
        status = ${newStatus},
        real_amount_eur = ${realAmountEUR},
        commission_amount = ${commission},
        executor_id = ${executorId},
        updated_at = NOW()
      WHERE id = ${testTransaction[0].id}
      RETURNING id, status, real_amount_eur, commission_amount, executor_id, updated_at
    `
    
    console.log(`‚úÖ Transaction mise √† jour:`)
    console.log(`   - Nouveau statut: ${updatedTransaction[0].status}`)
    console.log(`   - Ex√©cuteur: ${updatedTransaction[0].executor_id ? 'Assign√©' : 'Non assign√©'}`)

    // 4. V√©rifier que l'ex√©cuteur peut voir la transaction
    console.log('\n4. V√©rification de la visibilit√© pour l\'ex√©cuteur...')
    const executorTransactions = await sql`
      SELECT 
        id, type, status, description, amount, currency,
        executor_id, commission_amount, real_amount_eur
      FROM transactions 
      WHERE executor_id = ${executor.id}
      ORDER BY created_at DESC
    `
    
    console.log(`üìä Transactions visibles par l'ex√©cuteur: ${executorTransactions.length}`)
    executorTransactions.forEach(transaction => {
      console.log(`   - ${transaction.id}: ${transaction.status}`)
      console.log(`     Description: ${transaction.description}`)
      console.log(`     Montant: ${transaction.amount} ${transaction.currency}`)
      console.log(`     Commission: ${transaction.commission_amount} XAF`)
    })

    // 5. V√©rifier les conditions pour le bouton d'ex√©cution
    console.log('\n5. V√©rification des conditions pour le bouton d\'ex√©cution...')
    const transactionsWithExecuteButton = executorTransactions.filter(t => 
      t.status === 'validated' && t.executor_id === executor.id
    )
    
    console.log(`üìä Transactions avec bouton d'ex√©cution: ${transactionsWithExecuteButton.length}`)
    transactionsWithExecuteButton.forEach(transaction => {
      console.log(`   - ${transaction.id}: ${transaction.description}`)
      console.log(`     ‚úÖ Statut: ${transaction.status} (validated)`)
      console.log(`     ‚úÖ Ex√©cuteur: ${transaction.executor_id} (assign√©)`)
      console.log(`     ‚úÖ Condition remplie: status='validated' && executor_id='${executor.id}'`)
    })

    // 6. Simuler l'ex√©cution par l'ex√©cuteur (√©tape 3: Ex√©cuteur)
    if (shouldValidate && transactionsWithExecuteButton.length > 0) {
      console.log('\n6. Ex√©cution par l\'ex√©cuteur...')
      
      const executionData = {
        receiptUrl: "https://example.com/receipt-" + testTransaction[0].id + ".pdf",
        executorComment: "Transaction ex√©cut√©e avec succ√®s - Test workflow complet"
      }
      
      console.log(`üì§ Donn√©es d'ex√©cution:`)
      console.log(`   - URL du re√ßu: ${executionData.receiptUrl}`)
      console.log(`   - Commentaire: ${executionData.executorComment}`)
      
      const executedTransaction = await sql`
        UPDATE transactions 
        SET 
          status = 'executed',
          executed_at = NOW(),
          receipt_url = ${executionData.receiptUrl},
          executor_comment = ${executionData.executorComment}
        WHERE id = ${testTransaction[0].id}
        RETURNING id, status, executed_at, receipt_url, executor_comment
      `
      
      console.log(`‚úÖ Transaction ex√©cut√©e:`)
      console.log(`   - Statut: ${executedTransaction[0].status}`)
      console.log(`   - Date d'ex√©cution: ${executedTransaction[0].executed_at}`)
      console.log(`   - Re√ßu: ${executedTransaction[0].receipt_url}`)
      console.log(`   - Commentaire: ${executedTransaction[0].executor_comment}`)

      // 7. V√©rifier que le caissier peut voir la transaction ex√©cut√©e
      console.log('\n7. V√©rification de la visibilit√© pour le caissier...')
      const cashierTransactions = await sql`
        SELECT 
          id, type, status, description, amount, currency,
          created_by, executed_at
        FROM transactions 
        WHERE created_by = ${cashier.name} AND status = 'executed'
        ORDER BY created_at DESC
      `
      
      console.log(`üìä Transactions ex√©cut√©es cr√©√©es par le caissier: ${cashierTransactions.length}`)
      cashierTransactions.forEach(transaction => {
        console.log(`   - ${transaction.id}: ${transaction.status}`)
        console.log(`     Description: ${transaction.description}`)
        console.log(`     Ex√©cut√©e le: ${transaction.executed_at}`)
      })

      // 8. Simuler la cl√¥ture par le caissier (√©tape 4: Caissier)
      console.log('\n8. Cl√¥ture par le caissier...')
      
      const completedTransaction = await sql`
        UPDATE transactions 
        SET 
          status = 'completed',
          updated_at = NOW()
        WHERE id = ${testTransaction[0].id}
        RETURNING id, status, updated_at
      `
      
      console.log(`‚úÖ Transaction cl√¥tur√©e:`)
      console.log(`   - Statut final: ${completedTransaction[0].status}`)
      console.log(`   - Date de cl√¥ture: ${completedTransaction[0].updated_at}`)
    }

    // 9. V√©rifier le statut final
    console.log('\n9. V√©rification du statut final...')
    const finalTransaction = await sql`
      SELECT 
        id, type, status, description, amount, real_amount_eur, commission_amount,
        executor_id, executed_at, receipt_url, executor_comment,
        created_at, updated_at
      FROM transactions 
      WHERE id = ${testTransaction[0].id}
    `
    
    const transaction = finalTransaction[0]
    console.log(`üìä √âtat final de la transaction:`)
    console.log(`   - ID: ${transaction.id}`)
    console.log(`   - Statut: ${transaction.status}`)
    console.log(`   - Description: ${transaction.description}`)
    console.log(`   - Montant: ${transaction.amount} XAF`)
    console.log(`   - Montant r√©el: ${transaction.real_amount_eur} EUR`)
    console.log(`   - Commission: ${transaction.commission_amount} XAF`)
    console.log(`   - Ex√©cuteur: ${transaction.executor_id ? 'Assign√©' : 'Non assign√©'}`)
    console.log(`   - Ex√©cut√© le: ${transaction.executed_at || 'Non ex√©cut√©'}`)
    console.log(`   - Re√ßu: ${transaction.receipt_url || 'Non fourni'}`)
    console.log(`   - Commentaire: ${transaction.executor_comment || 'Aucun'}`)

    console.log('\nüéâ Test du workflow complet termin√©!')
    console.log('\nüìã R√©sum√© du workflow:')
    console.log('‚úÖ √âtape 1: Caissier cr√©e la transaction (pending)')
    console.log('‚úÖ √âtape 2: Auditeur valide avec montant r√©el (validated)')
    console.log('‚úÖ √âtape 3: Ex√©cuteur voit la transaction et peut l\'ex√©cuter')
    console.log('‚úÖ √âtape 4: Ex√©cuteur ex√©cute la transaction (executed)')
    console.log('‚úÖ √âtape 5: Caissier voit la transaction ex√©cut√©e')
    console.log('‚úÖ √âtape 6: Caissier cl√¥ture la transaction (completed)')
    console.log('‚úÖ Commission calcul√©e automatiquement')
    console.log('‚úÖ Assignation automatique √† l\'ex√©cuteur')
    console.log('‚úÖ Dashboard de l\'ex√©cuteur fonctionne')
    console.log('‚úÖ Bouton d\'ex√©cution appara√Æt correctement')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

testCompleteExecutorWorkflow()
