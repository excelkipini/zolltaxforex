#!/usr/bin/env node

/**
 * Script pour cr√©er directement l'utilisateur Stevie avec le r√¥le Ex√©cuteur
 */

import 'dotenv/config'
import { neon } from '@neondatabase/serverless'
import { readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'
import bcrypt from 'bcryptjs'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Charger explicitement le fichier .env.local
try {
  const envPath = join(__dirname, '..', '.env.local')
  const envContent = readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
} catch (error) {
  console.log('‚ö†Ô∏è  Fichier .env.local non trouv√© ou erreur de lecture')
}

// Configuration de la base de donn√©es
const sql = neon(process.env.DATABASE_URL)

async function createStevieUser() {
  console.log('üë§ Cr√©ation de l\'utilisateur Stevie avec le r√¥le Ex√©cuteur\n')

  try {
    // 1. V√©rifier si l'utilisateur existe d√©j√†
    console.log('1Ô∏è‚É£ V√©rification de l\'existence de l\'utilisateur Stevie...')
    
    const existingUser = await sql`
      SELECT id, name, email, role, agency 
      FROM users 
      WHERE email = 'gs.kibila@gmail.com'
    `

    if (existingUser.length > 0) {
      console.log('‚ö†Ô∏è  L\'utilisateur Stevie existe d√©j√†:')
      console.log(`   Nom: ${existingUser[0].name}`)
      console.log(`   Email: ${existingUser[0].email}`)
      console.log(`   R√¥le: ${existingUser[0].role}`)
      console.log(`   Agence: ${existingUser[0].agency}`)
      console.log('')
      
      // Mettre √† jour le r√¥le si n√©cessaire
      if (existingUser[0].role !== 'executor') {
        await sql`
          UPDATE users 
          SET role = 'executor', agency = 'Administration (France)'
          WHERE email = 'gs.kibila@gmail.com'
        `
        console.log('‚úÖ R√¥le mis √† jour vers "executor" et agence vers "Administration (France)"')
      }
      
      return existingUser[0]
    }

    // 2. V√©rifier que l'agence "Administration (France)" existe
    console.log('2Ô∏è‚É£ V√©rification de l\'agence "Administration (France)"...')
    
    const agency = await sql`
      SELECT id::text, name, country, address, status
      FROM agencies 
      WHERE name = 'Administration (France)'
      LIMIT 1
    `
    
    if (agency.length === 0) {
      console.log('‚ùå Agence "Administration (France)" non trouv√©e')
      console.log('   Cr√©ation de l\'agence...')
      
      const newAgency = await sql`
        INSERT INTO agencies (name, country, address, status)
        VALUES ('Administration (France)', 'France', 'Paris, France', 'active')
        RETURNING id::text, name, country, address, status
      `
      
      console.log(`   ‚úÖ Agence cr√©√©e: ${newAgency[0].name} (${newAgency[0].id})`)
    } else {
      console.log(`   ‚úÖ Agence trouv√©e: ${agency[0].name} (${agency[0].id})`)
    }
    console.log('')

    // 3. Cr√©er le mot de passe hash√©
    console.log('3Ô∏è‚É£ Cr√©ation du mot de passe hash√©...')
    
    const password = 'stevie123' // Mot de passe par d√©faut
    const passwordHash = await bcrypt.hash(password, 10)
    console.log(`   ‚úÖ Mot de passe hash√© cr√©√©`)
    console.log('')

    // 4. Cr√©er l'utilisateur Stevie
    console.log('4Ô∏è‚É£ Cr√©ation de l\'utilisateur Stevie...')
    
    const result = await sql`
      INSERT INTO users (name, email, role, agency, password_hash)
      VALUES ('Stevie', 'gs.kibila@gmail.com', 'executor', 'Administration (France)', ${passwordHash})
      RETURNING id::text, name, email, role, agency, created_at::text as created_at
    `

    const newUser = result[0]
    console.log('‚úÖ Utilisateur Stevie cr√©√© avec succ√®s:')
    console.log(`   ID: ${newUser.id}`)
    console.log(`   Nom: ${newUser.name}`)
    console.log(`   Email: ${newUser.email}`)
    console.log(`   R√¥le: ${newUser.role}`)
    console.log(`   Agence: ${newUser.agency}`)
    console.log(`   Cr√©√© le: ${newUser.created_at}`)
    console.log(`   Mot de passe: ${password}`)
    console.log('')

    // 5. V√©rifier les permissions de l'ex√©cuteur
    console.log('5Ô∏è‚É£ V√©rification des permissions de l\'ex√©cuteur...')
    
    const executorPermissions = [
      'view_dashboard',
      'view_transactions', 
      'execute_transactions',
      'view_expenses'
    ]
    
    console.log('   üîê Permissions de l\'ex√©cuteur:')
    executorPermissions.forEach(permission => {
      console.log(`      ‚úÖ ${permission}`)
    })
    console.log('')

    // 6. V√©rifier les menus accessibles
    console.log('6Ô∏è‚É£ V√©rification des menus accessibles...')
    
    const executorMenus = [
      'dashboard',
      'transactions', 
      'expenses'
    ]
    
    console.log('   üìã Menus accessibles pour l\'ex√©cuteur:')
    executorMenus.forEach(menu => {
      console.log(`      ‚úÖ ${menu}`)
    })
    console.log('')

    // 7. V√©rifier les actions principales
    console.log('7Ô∏è‚É£ V√©rification des actions principales...')
    
    const executorActions = [
      { label: 'Ex√©cuter transferts', href: '/transactions' },
      { label: 'Voir op√©rations', href: '/transactions' }
    ]
    
    console.log('   üéØ Actions principales de l\'ex√©cuteur:')
    executorActions.forEach(action => {
      console.log(`      ‚úÖ ${action.label} ‚Üí ${action.href}`)
    })
    console.log('')

    console.log('üéâ Utilisateur Stevie cr√©√© avec succ√®s !')
    console.log('\nüìù Instructions de connexion:')
    console.log('   Email: gs.kibila@gmail.com')
    console.log('   Mot de passe: stevie123')
    console.log('   R√¥le: Ex√©cuteur')
    console.log('   Agence: Administration (France)')
    console.log('')
    console.log('üöÄ L\'utilisateur Stevie peut maintenant:')
    console.log('   ‚úÖ Se connecter au syst√®me')
    console.log('   ‚úÖ Acc√©der au tableau de bord')
    console.log('   ‚úÖ Consulter les transactions')
    console.log('   ‚úÖ Ex√©cuter les transferts d\'argent')
    console.log('   ‚úÖ Consulter les d√©penses')

    return newUser

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur Stevie:', error)
    throw error
  }
}

// Ex√©cuter la cr√©ation
createStevieUser()
  .then(() => {
    console.log('\nüéØ Instructions pour tester:')
    console.log('   1. Connectez-vous avec les identifiants de Stevie')
    console.log('   2. V√©rifiez qu\'il a acc√®s au tableau de bord')
    console.log('   3. V√©rifiez qu\'il peut voir les onglets Op√©rations et D√©penses')
    console.log('   4. Testez l\'ex√©cution d\'une transaction de transfert')
    console.log('   5. V√©rifiez que les permissions sont correctes')
  })
  .catch(error => {
    console.error('‚ùå √âchec de la cr√©ation:', error)
    process.exit(1)
  })
