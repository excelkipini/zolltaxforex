#!/usr/bin/env node

/**
 * Script pour cr√©er un utilisateur ex√©cuteur de test
 */

import 'dotenv/config'
import { neon } from '@neondatabase/serverless'
import { readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'
import bcrypt from 'bcryptjs'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Charger explicitement le fichier .env.local
try {
  const envPath = join(__dirname, '..', '.env.local')
  const envContent = readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
} catch (error) {
  console.log('‚ö†Ô∏è  Fichier .env.local non trouv√© ou erreur de lecture')
}

// Configuration de la base de donn√©es
const sql = neon(process.env.DATABASE_URL)

async function createExecutorUser() {
  console.log('üë§ Cr√©ation d\'un utilisateur ex√©cuteur de test\n')

  try {
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await sql`
      SELECT id, name, email, role 
      FROM users 
      WHERE email = 'executor@zolltaxforex.com'
    `

    if (existingUser.length > 0) {
      console.log('‚ö†Ô∏è  L\'utilisateur ex√©cuteur existe d√©j√†:')
      console.log(`   Nom: ${existingUser[0].name}`)
      console.log(`   Email: ${existingUser[0].email}`)
      console.log(`   R√¥le: ${existingUser[0].role}`)
      console.log('')
      
      // Mettre √† jour le r√¥le si n√©cessaire
      if (existingUser[0].role !== 'executor') {
        await sql`
          UPDATE users 
          SET role = 'executor' 
          WHERE email = 'executor@zolltaxforex.com'
        `
        console.log('‚úÖ R√¥le mis √† jour vers "executor"')
      }
      
      return existingUser[0]
    }

    // Cr√©er le mot de passe hash√©
    const password = 'executor123'
    const passwordHash = await bcrypt.hash(password, 10)

    // Cr√©er l'utilisateur ex√©cuteur
    const result = await sql`
      INSERT INTO users (name, email, role, agency, password_hash)
      VALUES ('Ex√©cuteur Test', 'executor@zolltaxforex.com', 'executor', 'Agence Centre', ${passwordHash})
      RETURNING id::text, name, email, role, agency
    `

    const newUser = result[0]
    console.log('‚úÖ Utilisateur ex√©cuteur cr√©√© avec succ√®s:')
    console.log(`   ID: ${newUser.id}`)
    console.log(`   Nom: ${newUser.name}`)
    console.log(`   Email: ${newUser.email}`)
    console.log(`   R√¥le: ${newUser.role}`)
    console.log(`   Agence: ${newUser.agency}`)
    console.log(`   Mot de passe: ${password}`)
    console.log('')

    // V√©rifier les permissions de l'ex√©cuteur
    console.log('üîê Permissions de l\'ex√©cuteur:')
    console.log('   ‚úÖ Acc√®s au tableau de bord')
    console.log('   ‚úÖ Consultation des transactions')
    console.log('   ‚úÖ Ex√©cution des transactions valid√©es')
    console.log('   ‚úÖ Consultation des d√©penses')
    console.log('   ‚úÖ Acc√®s aux onglets Op√©rations et D√©penses')
    console.log('')

    return newUser

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur ex√©cuteur:', error)
    throw error
  }
}

// Ex√©cuter la cr√©ation
createExecutorUser()
  .then(() => {
    console.log('üéâ Utilisateur ex√©cuteur pr√™t pour les tests !')
    console.log('\nüìù Instructions de connexion:')
    console.log('   Email: executor@zolltaxforex.com')
    console.log('   Mot de passe: executor123')
    console.log('   R√¥le: Ex√©cuteur')
  })
  .catch(error => {
    console.error('‚ùå √âchec de la cr√©ation:', error)
    process.exit(1)
  })
