#!/usr/bin/env node

/**
 * Script de test pour v√©rifier les boutons de validation dans le tableau de bord des comptables
 */

import 'dotenv/config'
import { neon } from '@neondatabase/serverless'
import { readFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Charger explicitement le fichier .env.local
try {
  const envPath = join(__dirname, '..', '.env.local')
  const envContent = readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
} catch (error) {
  console.log('‚ö†Ô∏è  Fichier .env.local non trouv√© ou erreur de lecture')
}

// Configuration de la base de donn√©es
const sql = neon(process.env.DATABASE_URL)

async function testAccountingDashboardButtons() {
  console.log('üß™ Test des boutons de validation dans le tableau de bord des comptables\n')

  try {
    // 1. Cr√©er plusieurs d√©penses de test avec diff√©rents statuts
    console.log('1Ô∏è‚É£ Cr√©ation de d√©penses de test...')
    
    const testExpenses = [
      {
        description: 'Test boutons comptable - Pending',
        amount: 30000,
        category: 'Bureau',
        requested_by: 'Test User',
        agency: 'Agence Centre',
        status: 'pending'
      },
      {
        description: 'Test boutons comptable - Accounting Approved',
        amount: 40000,
        category: 'Transport',
        requested_by: 'Test User 2',
        agency: 'Agence Centre',
        status: 'accounting_approved',
        accounting_validated_by: 'Comptable Test',
        accounting_validated_at: 'NOW()'
      },
      {
        description: 'Test boutons comptable - Director Approved',
        amount: 50000,
        category: 'Communication',
        requested_by: 'Test User 3',
        agency: 'Agence Centre',
        status: 'director_approved',
        accounting_validated_by: 'Comptable Test',
        accounting_validated_at: 'NOW()',
        director_validated_by: 'Directeur Test',
        director_validated_at: 'NOW()'
      }
    ]

    for (const expense of testExpenses) {
      const result = await sql`
        INSERT INTO expenses (description, amount, category, requested_by, agency, status, accounting_validated_by, accounting_validated_at, director_validated_by, director_validated_at)
        VALUES (${expense.description}, ${expense.amount}, ${expense.category}, ${expense.requested_by}, ${expense.agency}, ${expense.status}, 
                ${expense.accounting_validated_by || null}, 
                ${expense.accounting_validated_at === 'NOW()' ? sql`NOW()` : expense.accounting_validated_at || null},
                ${expense.director_validated_by || null}, 
                ${expense.director_validated_at === 'NOW()' ? sql`NOW()` : expense.director_validated_at || null})
        RETURNING id::text, description, status;
      `
      console.log(`‚úÖ ${result[0].description} - Statut: ${result[0].status}`)
    }

    console.log('')

    // 2. V√©rifier les d√©penses en attente pour les comptables
    console.log('2Ô∏è‚É£ V√©rification des d√©penses en attente pour les comptables...')
    const pendingExpenses = await sql`
      SELECT id, description, status, amount, requested_by, agency, category
      FROM expenses 
      WHERE status = 'pending'
      ORDER BY created_at DESC
    `
    
    console.log(`‚úÖ ${pendingExpenses.length} d√©pense(s) en attente de validation comptable:`)
    pendingExpenses.forEach(expense => {
      console.log(`   - ${expense.description} (${expense.amount} XAF) par ${expense.requested_by}`)
    })
    console.log('   ‚Üí Les comptables devraient voir les boutons "Approuver" et "Rejeter" sur ces d√©penses\n')

    // 3. V√©rifier les d√©penses approuv√©es par la comptabilit√© pour les directeurs
    console.log('3Ô∏è‚É£ V√©rification des d√©penses approuv√©es par la comptabilit√©...')
    const accountingApprovedExpenses = await sql`
      SELECT id, description, status, amount, requested_by, agency, category, accounting_validated_by
      FROM expenses 
      WHERE status = 'accounting_approved'
      ORDER BY accounting_validated_at DESC
    `
    
    console.log(`‚úÖ ${accountingApprovedExpenses.length} d√©pense(s) en attente de validation directeur:`)
    accountingApprovedExpenses.forEach(expense => {
      console.log(`   - ${expense.description} (${expense.amount} XAF) par ${expense.requested_by}`)
      console.log(`     Valid√© par comptabilit√©: ${expense.accounting_validated_by}`)
    })
    console.log('   ‚Üí Les directeurs devraient voir les boutons "Approuver" et "Rejeter" sur ces d√©penses\n')

    // 4. V√©rifier les d√©penses finalement approuv√©es
    console.log('4Ô∏è‚É£ V√©rification des d√©penses finalement approuv√©es...')
    const finalApprovedExpenses = await sql`
      SELECT id, description, status, amount, requested_by, agency, category, director_validated_by
      FROM expenses 
      WHERE status = 'director_approved'
      ORDER BY director_validated_at DESC
    `
    
    console.log(`‚úÖ ${finalApprovedExpenses.length} d√©pense(s) finalement approuv√©es:`)
    finalApprovedExpenses.forEach(expense => {
      console.log(`   - ${expense.description} (${expense.amount} XAF) par ${expense.requested_by}`)
      console.log(`     Valid√© par directeur: ${expense.director_validated_by}`)
    })
    console.log('   ‚Üí Ces d√©penses ne devraient plus avoir de boutons de validation\n')

    // 5. Test de l'API pour v√©rifier que les endpoints fonctionnent
    console.log('5Ô∏è‚É£ Test des endpoints API...')
    
    // Test GET /api/expenses pour comptables
    console.log('   Test GET /api/expenses (comptables)...')
    try {
      const response = await fetch('http://localhost:3000/api/expenses', {
        headers: {
          'Content-Type': 'application/json',
          // Note: En production, il faudrait inclure les headers d'authentification
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log(`   ‚úÖ API r√©pond correctement (${data.data?.length || 0} d√©penses)`)
      } else {
        console.log(`   ‚ö†Ô∏è  API r√©pond avec le code ${response.status}`)
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Serveur non d√©marr√© ou erreur de connexion')
    }

    // 6. R√©sum√© des tests
    console.log('üìã R√©sum√© des tests:')
    console.log('   ‚úÖ D√©penses cr√©√©es avec diff√©rents statuts')
    console.log('   ‚úÖ D√©penses en attente identifi√©es pour les comptables')
    console.log('   ‚úÖ D√©penses approuv√©es par comptabilit√© identifi√©es pour les directeurs')
    console.log('   ‚úÖ D√©penses finalement approuv√©es identifi√©es')
    console.log('   ‚úÖ Interface mise √† jour pour afficher les boutons selon les r√¥les\n')

    console.log('üéØ Instructions pour tester dans l\'interface:')
    console.log('   1. Connectez-vous en tant que comptable')
    console.log('   2. Allez sur le tableau de bord (page d\'accueil)')
    console.log('   3. Dans la section "D√©penses en attente d\'approbation"')
    console.log('   4. Vous devriez maintenant voir les boutons "Approuver" et "Rejeter"')
    console.log('   5. Testez l\'approbation d\'une d√©pense')
    console.log('   6. Connectez-vous en tant que directeur')
    console.log('   7. Vous devriez voir les d√©penses approuv√©es par la comptabilit√©')
    console.log('   8. Vous devriez voir les boutons "Approuver" et "Rejeter"')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testAccountingDashboardButtons()
